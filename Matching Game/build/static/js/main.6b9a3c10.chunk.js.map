{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","console","log","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAQhE,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OAAOC,IAAI,iBAAiBE,QAV7B,WACbJ,GACHF,EAAaD,IAQsDM,IAAI,eCV7E,IAAME,EAAa,CACjB,CAAE,IAAO,qBAAsBC,SAAS,GACxC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,qBAAsBA,SAAS,GACxC,CAAE,IAAO,mBAAoBA,SAAS,GACtC,CAAE,IAAO,kBAAmBA,SAAS,IAuFxBC,MApFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGMC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAA1B,GAAI,kCAAUA,GAAV,IAAgB2B,GAAIH,KAAKC,cAEpCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAILd,EAAe,SAACD,GACpB4B,QAAQC,IAAI7B,GACZgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAIhD8B,qBAAU,WACJd,GAAaE,IACfE,GAAY,GAERJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAAAkB,GACP,OAAOA,EAAUL,KAAI,SAAA1B,GACnB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAKL,GAAZ,IAAkBS,SAAS,IAEpBT,QAIbgC,KAEAC,YAAW,kBAAMD,MAAa,QAIjC,CAAChB,EAAWE,IAGf,IAAMc,EAAY,WAChBf,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAmB,GAAS,OAAIA,EAAY,KAClCd,GAAY,IAQd,OAJAU,qBAAU,WACRT,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,qDAEA,wBAAQG,QAASc,EAAjB,uBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GAJLH,EAAK2B,SAShB,wCAAWb,SCvFjBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6b9a3c10.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\r\n\r\n  const handleClick = () => {\r\n    if (!disabled) {\r\n      handleChoice(card)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className={flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" src={card.src} alt=\"card front\" />\r\n        <img className=\"back\" src=\"/img/cover.png\" onClick={handleClick} alt=\"cover\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport SingleCard from './components/SingleCard'\r\n\r\nconst cardImages = [\r\n  { \"src\": \"/img/doremon-1.png\", matched: false },\r\n  { \"src\": \"/img/dorami-1.png\", matched: false },\r\n  { \"src\": \"/img/Nobita-1.png\", matched: false },\r\n  { \"src\": \"/img/shizuka-1.png\", matched: false },\r\n  { \"src\": \"/img/suneo-1.png\", matched: false },\r\n  { \"src\": \"/img/zyan-1.jpg\", matched: false },\r\n]\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([])\r\n  const [turns, setTurns] = useState(0)\r\n  const [choiceOne, setChoiceOne] = useState(null)\r\n  const [choiceTwo, setChoiceTwo] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  // shuffle cards for new game\r\n  const shuffleCards = () => {\r\n    const shuffledCards = [...cardImages, ...cardImages]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map(card => ({ ...card, id: Math.random() }))\r\n      \r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setCards(shuffledCards)\r\n    setTurns(0)\r\n  }\r\n\r\n  // handle a choice\r\n  const handleChoice = (card) => {\r\n    console.log(card)\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\r\n  }\r\n\r\n  // compare 2 selected cards\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true)\r\n\r\n      if (choiceOne.src === choiceTwo.src) {\r\n        setCards(prevCards => {\r\n          return prevCards.map(card => {\r\n            if (card.src === choiceOne.src) {\r\n              return { ...card, matched: true }\r\n            } else {\r\n              return card\r\n            }\r\n          })\r\n        })\r\n        resetTurn()\r\n      } else {\r\n        setTimeout(() => resetTurn(), 1000)\r\n      }\r\n\r\n    }\r\n  }, [choiceOne, choiceTwo])\r\n\r\n  // reset choices & increase turn\r\n  const resetTurn = () => {\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setTurns(prevTurns => prevTurns + 1)\r\n    setDisabled(false)\r\n  }\r\n\r\n  // start new game automagically\r\n  useEffect(() => {\r\n    shuffleCards()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>!! Matching Game !!</h1>\r\n\r\n      <button onClick={shuffleCards}>Start New</button>\r\n\r\n      <div className=\"card-grid\">\r\n        {cards.map(card => (\r\n          <SingleCard \r\n            key={card.id}\r\n            card={card}\r\n            handleChoice={handleChoice}\r\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\r\n            disabled={disabled}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <p>Turns: {turns}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}